# /etc/sysctl.conf
#
# For more information on how this file works, please see
# the manpages sysctl(8) and sysctl.conf(5).
#
# In order for this file to work properly, you must first
# enable 'Sysctl support' in the kernel.
#
# Look in /proc/sys/ for all the things you can setup.
#

# Disables packet forwarding
# I think IP forwarding has to be enabled to host virtual machines?
net.ipv4.ip_forward = 0
# Disables IP dynaddr
net.ipv4.ip_dynaddr = 0

# Enable people in the specified (min, max) group range to send ICMP_ECHO
# messages (i.e. ping) and receive ICMP_ECHOREPLY responses.  This allows
# you to run non-suid and non-caps `ping`, but it also means anyone with
# a gid in this range can send those packets (not just via `ping`).
#net.ipv4.ping_group_range = 100 100

# You should compile nfsd into the kernel or add it
# to modules.autoload for this to work properly
# TCP Port for lock manager
#fs.nfs.nlm_tcpport = 0
# UDP Port for lock manager
#fs.nfs.nlm_udpport = 0

# Increase inotify watch limit for IDEs
fs.inotify.max_user_watches = 524288

# Enable IPv6 Privacy Extensions
net.ipv6.conf.all.use_tempaddr = 2
net.ipv6.conf.default.use_tempaddr = 2
net.ipv6.conf.enp0s3.use_tempaddr = 2

# I copied all of this from Red Hat:
# https://docs.fedoraproject.org/en-US/Community_Services_Infrastructure/1/html/Security_Policy/HostGeneralSecurity-Standard-Sysctl.html

# Controls source route verification
net.ipv4.conf.default.rp_filter = 1

# Controls whether core dumps will append the PID to the core filename.
# Useful for debugging multi-threaded applications.
kernel.core_uses_pid = 1

# Controls the use of TCP syncookies
# http://cr.yp.to/syncookies.html
net.ipv4.tcp_syncookies = 1

# CSI Compliance
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1
# CSI compliance has log_martians = 1
net.ipv4.conf.all.log_martians = 0
net.ipv4.conf.default.log_martians = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0

# Address Space Layout Randomization
kernel.randomize_va_space = 2

# Protected symbolic and hard links
fs.protected_hardlinks = 1
fs.protected_symlinks = 1

# File system swappiness, et cetera
# I reduced dirty_ratio because I tend to have a lot of RAM.
# 20% of 32 GBs or 64 GBs would be clearly insane.
# I decreased cache pressure because the internet said so.
vm.swappiness = 1
vm.dirty_ratio = 5
vm.vfs_cache_pressure = 50

# Network performance stuff
# Torrents? Docker? Seems like increasing somaxconn is a good idea.
net.core.somaxconn = 8192
net.core.netdev_max_backlog = 8333
net.ipv4.tcp_rfc1337 = 1
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_timestamps = 1
# n.b.; tcp_fack is a legacy option per the kernel docs
# https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt
net.ipv4.tcp_sack = 1
net.ipv4.tcp_moderate_rcvbuf = 1
net.ipv4.tcp_congestion_control = bbr
net.core.default_qdisc = cake
net.ipv4.tcp_rmem = 4096 87380 16777216
net.ipv4.tcp_wmem = 4096 65536 16777216
net.ipv4.udp_rmem_min = 16384
net.ipv4.udp_wmem_min = 16384
net.core.rmem_max = 16777216
net.ipv4.tcp_fastopen = 3
net.ipv4.tcp_slow_start_after_idle = 0
net.ipv4.tcp_low_latency = 1
# ECN only when asked for
net.ipv4.tcp_ecn = 2
net.ipv4.tcp_ecn_fallback = 1
net.ipv4.tcp_dsack=1
net.ipv4.tcp_mtu_probing = 1

# Reuse sockets in the TIME-WAIT state
net.ipv4.tcp_tw_reuse = 1

# Increase the maximum local port range
net.ipv4.ip_local_port_range = 32768 65535

# Allow all users to ping without root capabilities
net.ipv4.ping_group_range = 0 65535

# Disable core dumps
kernel.core_pattern=|/bin/false
fs.suid_dumpable = 0

# Disable access to kernel dmesg for normal users
kernel.dmesg_restrict = 1

# Hide /proc/kallsyms
kernel.kptr_restrict = 2

# Harden JIT BPF
net.core.bpf_jit_harden = 2

# Restrict eBPF to CAP_BPF
kernel.unprivileged_bpf_disabled = 1

# Disable ptrace
kernel.yama.ptrace_scope = 2

# Only allow (self) signed modules to be loaded
# module.sig_enforce = 1

# Disable kexec which allows the kernel to be replaced(?)
kernel.kexec_load_disabled = 1

# Restrict TTY line disciplines
dev.tty.ldisc_autoload = 0

# Restrict userfaultfd()
vm.unprivileged_userfaultfd = 0

# Disable SysRq...which I don't think I'll ever use anyway.
kernel.sysrq = 0

# Restrict user namespaces. My research shows that Steam with Proton/WINE may require
# reversing this setting temporarily. Docker too.
kernel.unprivileged_userns_clone = 0

# Restrict access to performance events.
kernel.perf_event_paranoid = 3

# Harden FIFOs to mitigate data spoofing.
fs.protected_fifos = 2
fs.protected_regular = 2

# The NMI watchdog may generate a lot of hardware interrupts
kernel.nmi_watchdog = 0
